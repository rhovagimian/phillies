<div class="container">
    <h1>MLB Salaries for {{year}}</h1>
    <div class="chart-container">
        <canvas id="salaryChart"></canvas>
    </div>
    <div class="accordion" id="dataset">
        <div class="card">
            <div class="card-header" id="fullset">
                <h5 class="mb-0">
                    <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#salaryTable"
                        aria-expanded="true" aria-controls="salaryTable">
                        Salary Data
                    </button>
                </h5>
            </div>

            <div id="salaryTable" class="collapse" aria-labelledby="fullset" data-parent="#dataset">
                <div class="card-body">
                    {{{salaryTable}}}
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let ctx = document.getElementById("salaryChart").getContext('2d');
    let chartData = {{{ chartData }}};
    for (var i = 0; i < chartData.datasets.length; i++) {
        chartData.datasets[i].backgroundColor = Chart.helpers
            .color(chartData.datasets[i].borderColor)
            .alpha(0.2)
            .rgbString();
    }

    let scatterChart = Chart.Scatter(ctx, {
        data: {
            datasets: chartData.datasets
        },
        options: {
            //https://stackoverflow.com/questions/45149062/chart-js-how-to-show-cursor-pointer-for-labels-legends-in-line-chart
            legend: {
                onHover: function (e) {
                    e.target.style.cursor = 'pointer';
                }
            },
            hover: {
                onHover: function (e) {
                    var point = this.getElementAtEvent(e);
                    if (point.length) e.target.style.cursor = 'pointer';
                    else e.target.style.cursor = 'default';
                }
            },
            tooltips: {
                callbacks: {
                    label: (tooltipItem, data) => {
                        return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].label;
                    }
                }
            },
            scales: {
                yAxes: [{
                    ticks: {
                        callback: (value, index, values) => {
                            return formatCurrency(value, 0);
                        }
                    }
                }],
                gridLines: {
                    tickMarkLength: 100
                },
                xAxes: [{
                    type: "category",
                    labels: chartData.xAxisLabels,
                    ticks: {
                        autoSkip: false,
                        maxRotation: 0,
                        callback: function (value, index, values) {
                            return (value.length === 1) ? value : undefined;
                        }
                    },
                    fontStyle: "normal",
                    fontSize: 10,
                    position: "bottom"
                }]
            }
        }
    });

</script>
</div>